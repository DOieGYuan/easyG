#!/usr/bin/env bash
############################################################################
# Master GOne script that calls on individual modules/pipelines            #
# The framework is derived from metaWRAP https://github.com/bxlab/metawrap #
############################################################################

VERSION="0.1"

function help_message () {
  echo ""
	echo -e "\033[32mGOne v=$VERSION\033[0m"
  echo ""
  echo -n "Usage: "
	echo -ne "\033[32mgone \033[0m"
  echo -e "\033[35;1m[option]\033[0m"
	echo ""
  echo "Workflow:"
  echo -ne "\033[35;1mwf                 \033[0m"
	echo "Performed the workflow with automatically optimized (adaptive) parameters"
  echo ""
  echo "Modules (Fundamental processes):"
  echo -ne "\033[35;1mqc                 \033[0m"
  echo "Remove contaminations and low-quality reads"
  echo -ne "\033[35;1massembly           \033[0m"
	echo "Assemble a pair short reads into contigs"
  echo -ne "\033[35;1mcoassembly         \033[0m"
	echo "Assemble multiple pairs short reads into contigs"
  echo -ne "\033[35;1mbinning_single     \033[0m"
	echo "Classify contigs from single assembly into genomes (bins)"
  echo -ne "\033[35;1mbinning_multiple   \033[0m"
  echo "Classify contigs from coassembly into genomes (bins)"
  echo -ne "\033[35;1mbin_refine         \033[0m"
  echo "Improve binning results"
  echo -ne "\033[35;1mbin_cluster        \033[0m"
  echo "Dereplicate bins"
  echo -ne "\033[35;1mbin_taxonomy       \033[0m"
  echo "Taxonomically classify bins"
  echo -ne "\033[35;1mbin_quant          \033[0m"
  echo "Quantify bins"
  echo -ne "\033[35;1mbin_function       \033[0m"
  echo "Annotate bins with functions"
	echo ""
  echo "Modules (Advanced analyses):"
  echo -ne "\033[35;1marg                \033[0m"
	echo "Find ARGs in bins"
	echo ""
  echo "Settings"
	echo "--help | -h        show this help message"
	echo "--version | -v     show GOne version"
	echo "--show-config      show where the gone configuration files are stored"
  echo ""
}

config_file=$(which config-gone)
source $config_file
if [[ $? -ne 0 ]]; then
	echo -e "\033[31m[Error: installation issue] cannot find config-gone file ! \033[0m"
	exit 1
fi

function comm () {
  ${SOFT}/print_comment.py "$1" "-"
}

########################################################################################################
########################     LOADING IN THE PARAMETERS AND RUNNING MODULE       ########################
########################################################################################################

# setting scripts, pipelines, and databases locations from config file (should be in same folder as main script)

if [ "$1" = wf ]; then
	echo gone wf ${@:2}
	time ${PIPES}/wf_main.sh ${@:2}
elif [ "$1" = qc ]; then
  echo gone qc ${@:2}
  time ${PIPES}/qc.sh ${@:2}
elif [ "$1" = assembly ]; then
	echo gone assembly ${@:2}
	time ${PIPES}/assembly.sh ${@:2}
elif [ "$1" = coassembly ]; then
	echo gone coassembly ${@:2}
	time ${PIPES}/coassembly.sh ${@:2}
elif [ "$1" = binning_single ]; then
        echo gone binning_single ${@:2}
        time ${PIPES}/binning_single.sh ${@:2}
elif [ "$1" = binning_multiple ]; then
        echo gone binning_multiple ${@:2}
	time ${PIPES}/binning_multiple.sh ${@:2}
elif [ "$1" = bin_refine ]; then
        echo gone bin_refine ${@:2}
	time ${PIPES}/bin_refine.sh ${@:2}
elif [ "$1" = bin_cluster ]; then
	echo gone bin_cluster ${@:2}
	time ${PIPES}/bin_cluster.sh ${@:2}
elif [ "$1" = bin_taxonomy ]; then
        echo gone bin_taxonomy ${@:2}
        time ${PIPES}/bin_taxonomy.sh ${@:2}
elif [ "$1" = bin_quant ]; then
	echo gone bin_quant ${@:2}
	time ${PIPES}/bin_quant.sh ${@:2}
elif [ "$1" = bin_function ]; then
	echo gone bin_function ${@:2}
	time ${PIPES}/bin_function.sh ${@:2}
elif [ "$1" = arg ]; then
	echo gone arg ${@:2}
	time ${PIPES}/arg.sh ${@:2}
elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	help_message
elif [ "$1" = "-v" ] || [ "$1" = "--version" ]; then
  echo ""
  echo -e "\033[32mGOne v=$VERSION\033[0m"
	echo ""
elif [ "$1" = "--show-config" ]; then
	comm "gone script found in $(which gone) and config-gone file was found in $(which config-gone). Please make sure these paths are consistent with each other."
	comm "Here are the contents of config-gone:"
	cat $(which config-gone)
else
        echo -e "\033[31mPlease select a proper module of GOne. \033[0m"
        help_message
        exit 1
fi



########################################################################################################
########################               END OF gone PIPELINE                 ########################
########################################################################################################
